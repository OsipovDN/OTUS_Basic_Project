Ship
Поля класса:
Объект класса хранит всю необходимую информацию о корабле и его состоянии:
cord- контейнер содержащий координаты корабля
hp - количество оставшихся жизней

Метода класса:
Конструктор:
Ship(const Cords& crd, const int& _dir, const int& _deck);
Принимаемые значения:
std::pair<int,int> crd- координаты начала корабля (x,y)
_dir-направление (1-вверх,2-вправо,3-вниз, 4-влево)
_deck-количество палуб

Проверка попадания
bool isHit(Cords& crd) 
Возвращаемое значение:
true- если переданная пара координат x,y соответствует одной из координат корабля хранящихся в векторе cord
false- если не соответствует ни одному значению

Проверка на убит или нет
bool isLife( )
Возвращаемое значение:
true- если корабль еще на ходу
false- если корабль потоплен

Запрос координат коабля
std::vector <Cords> getCord( )
Возвращаемое значение:
Возвращает вектор координат x,y (std::vector <std::pair<int,int>>)

Player
Поля класса:
Объект класса обеспечивает взаимодействие игрока с объектами кораблей и хранит информацию о состоянии флота игрока и сделанных им ходов
std::vector <char> map_shot -карта сделанных ходов
std::vector<Ship> navy - контейнер объектов Ship
int ship_count- количество оставшихся кораблей
bool move- состояние хода (true- если игрок ходит)

Методы класса:
Конструктор:

Player()
Инициализирует пустой объект с параметрами по умолчанию:
ship_count=0;
move-false;

Player(const size_t& pol_count);
Приимаемое значения:
const size_t& pol_count -размер игрового поля (Пример: pol_count=10- игровое поле 10 на 10)
При инициализации
ship_count=0;
move-false;
При испльзовании данного конструктора формируется контейнер карты сделанных ходов размером pol_count*pol_count с исходным значением '*'

Размещение корабля на карте
bool setShip(const Cords& c, const int& _dir, const int& _deck)noexcept;
Проверка попадания
bool getShot(Cords& crd);
Проверка пересечения кораблей
bool isIntersecShip(const Cords& c, const int& _dir, const int& _deck)noexcept;
Проверка пересечения по периметру корабля
std::vector<Ship> shipPerim(Cords crd, const int& _dir, const int& _deck);
Проверка повторного хода
bool isRepeat(Cords& crd, size_t pol)const noexcept;
Задает метку на карте для каждого игрока
void setPoint(Cords& crd, size_t pol, char& point)noexcept;
Задает размер игрового поля
void setSizePol(size_t num);
Задает размер флота
void setNavyPl(int count) {navy.reserve(count);}
Возвращает количество кораблей
int shipCount() const noexcept { return ship_count; };
Передача карты игрока для печати
std::vector<char>& getMap()noexcept { return map_shot; }
Проверка хода
bool isMove()const noexcept { return move; }
Возвращает вектор с коодинатами всех кораблей
std::vector<Ship> getNavy()const noexcept { return navy; }
Задает статус хода
void moveStat(bool m)noexcept { move = m; }
Для проверки работы
void print()const;