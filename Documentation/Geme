Game
Поля класса:
Объект класса обеспечивает взаимодействие игроков между собой и описывает поведение игры
	std::unique_ptr<Player> plr1 - объект игрок 1
	std::unique_ptr<Player> plr2 - объект игрок 2
	std::unique_ptr<Menu> menu - объект взаимодействия с пользователем через консоль
	int pol - размер игрового поля (по умолчанию равно 10)
	bool multplr - true- один игрок, false - два игрока (по умолчанию false)	

Методы класса:
Game()- конструктор класса
При инициализации объекта вызывается диалоговое меню пользователя
для настройки исходных параметров игры таких как: 
	колличество игроков
	размер игрового поля
	выбор автоматической или ручной расстановки кораблей

Запуск игры
void play()
Метод описывает основное взаимодействие игроков и правила игры (например: 
при промахе переход хода, при подании повторный ход и тд.)

Задает количество игроков
void numberOfPlayers()
Вызывает метод класса Menu для взаимодействия с пользвателем через консоль 

Задает размер игрового поля и инициализирует объекты  plr1 и  plr2
void sizeOfTheField()
Вызывает метод класса Menu для взаимодействия с пользвателем через консоль

Режим расстановки кораблей
void placementMode() 
Вызывает метод класса Menu для взаимодействия с пользвателем через консоль
Внутри метода вызывается setNavy () с соответствующими параметрами полученными в консоли от
пользователя

Расстановка флота
void setNavy(std::unique_ptr<Player>& pl, bool st)
Принимаемые значения:
std::unique_ptr<Player>& pl - пользователь, который расставляет корабли
bool st - способ расстановки кораблей (true- ручной способ, false - автоматический)

Ввод координат
Cords&& setMove(const std::unique_ptr<Player>& pl)const
В методе производится проверка введенных координат пользователя
Проверка производится по следующим критериям:
Выход за пределы поля
Проверка корректности ввода (числовые значенияя)
Проверка повторения хода
Принимаемые значения:
const std::unique_ptr<Player>& pl - принимает в качестве аргуметнов объект игрока,
который делает ход
Возвращаемое значение:
Координаты x,y после всех проверок (переменная типа std::pair <int,int>)

Сделать выстрел
char setShot(const std::unique_ptr<Player>& pl1, const std::unique_ptr<Player>& pl2, Cords& crd)noexcept
Метод обеспечивает взаимодействие объектов plr1 и plr2
Принимаемые значения:
const std::unique_ptr<Player>& pl1 - объект игрок, который делает выстрел
const std::unique_ptr<Player>& pl2 - объект игрок, по которому сделан выстрел
Возвращаемое значение:
'Х' - если игрок попал
'+' - если промахнулся

Автоматический расчет координат
inline int autoSet(int p)const
Метод- генератор значений для автоматического расчета значений координат и направления
корабля при использовании автоматического режима
Принимаемые значения:
int p - диапазон из которого расчивается значение

Проверка выхода за границу поля
bool outOfBounds(Cords& crd, int& _dir, int& _deck)const noexcept
Метод проверяет положение корабля 
Принимаемые значения: 
Cords& crd - Координаты x,y в виде переменной типа std::pair <int,int>  
int& _dir - Направление корабля относительно первой координаты (1-вверх,2-вправо,3-вниз, 4-влево)
_deck - количество палуб
Возвращаемые значения:
true - если корабль выходит за пределы поля
false - если корабль не выходит за пределы поля

Вывод ироков на экран
void mapPol()- метод выводит карты игроков с учетом сделанных ходов в консоли

Задает цвет клетке
std::vector<char>::const_iterator colorOutput(std::vector<char>::const_iterator it_begin);
Метод меняет цвет символа в консоли в зависимости от попадания или промаха
'X' - крассный
'+' - зеленый
Принимаемые значения: 
std::vector<char>::const_iterator it_begin - итератор символа для проверки
Возвращаемое значение:
Возвращает итератор на следующий символ после переданного в аргументе